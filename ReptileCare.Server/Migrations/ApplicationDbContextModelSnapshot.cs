// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReptileCare.Server.Data;

#nullable disable

namespace ReptileCare.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("ReptileCare.Shared.Models.BehaviorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BehaviorType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAbnormal")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("BehaviorLogs");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.CaregiverAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccessGranted")
                        .HasColumnType("TEXT");

                    b.Property<bool>("CanDelete")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CanEdit")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("CaregiverAccesses");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.EnclosureProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasHeatingElement")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasUVBLighting")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("IdealHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("IdealTemperature")
                        .HasColumnType("REAL");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubstrateType")
                        .HasColumnType("TEXT");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("EnclosureProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HasHeatingElement = true,
                            HasUVBLighting = true,
                            Height = 60.0,
                            IdealHumidity = 30.0,
                            IdealTemperature = 32.0,
                            Length = 120.0,
                            Name = "Desert Terrarium",
                            SubstrateType = "Sand/Clay mix",
                            Width = 60.0
                        },
                        new
                        {
                            Id = 2,
                            HasHeatingElement = true,
                            HasUVBLighting = true,
                            Height = 90.0,
                            IdealHumidity = 70.0,
                            IdealTemperature = 28.0,
                            Length = 90.0,
                            Name = "Tropical Vivarium",
                            SubstrateType = "Coconut Fiber",
                            Width = 45.0
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.EnvironmentalReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsManualReading")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ReadingDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Source")
                        .HasColumnType("TEXT");

                    b.Property<double>("Temperature")
                        .HasColumnType("REAL");

                    b.Property<double?>("UVBIndex")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("EnvironmentalReadings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Humidity = 35.0,
                            IsManualReading = true,
                            ReadingDate = new DateTime(2025, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReptileId = 1,
                            Source = "Manual",
                            Temperature = 33.5,
                            UVBIndex = 6.7000000000000002
                        },
                        new
                        {
                            Id = 2,
                            Humidity = 65.0,
                            IsManualReading = true,
                            ReadingDate = new DateTime(2025, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReptileId = 2,
                            Source = "Manual",
                            Temperature = 28.0
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.FeedingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FeedingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FoodItem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WasEaten")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("FeedingRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FeedingDate = new DateTime(2025, 4, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodItem = "Crickets",
                            ItemType = 0,
                            Quantity = 12.0,
                            ReptileId = 1,
                            WasEaten = true
                        },
                        new
                        {
                            Id = 2,
                            FeedingDate = new DateTime(2025, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodItem = "Mealworms",
                            ItemType = 0,
                            Quantity = 15.0,
                            ReptileId = 1,
                            WasEaten = true
                        },
                        new
                        {
                            Id = 3,
                            FeedingDate = new DateTime(2025, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FoodItem = "Small Rat",
                            ItemType = 1,
                            Quantity = 1.0,
                            ReptileId = 2,
                            WasEaten = true
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.HealthScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssessedBy")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AssessmentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("HealthScores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssessmentDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Healthy and active.",
                            ReptileId = 1,
                            Score = 9
                        },
                        new
                        {
                            Id = 2,
                            AssessmentDate = new DateTime(2025, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Slight respiratory noise observed.",
                            ReptileId = 2,
                            Score = 8
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.MeasurementRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("MeasurementDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("MeasurementRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Length = 46.0,
                            MeasurementDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Gained some weight.",
                            ReptileId = 1,
                            Weight = 460.0
                        },
                        new
                        {
                            Id = 2,
                            Length = 121.0,
                            MeasurementDate = new DateTime(2025, 4, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Notes = "Normal growth.",
                            ReptileId = 2,
                            Weight = 1520.0
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.Reptile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAcquired")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int?>("EnclosureProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Length")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Sex")
                        .HasColumnType("TEXT");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("EnclosureProfileId");

                    b.ToTable("Reptiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAcquired = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Friendly beardie with orange coloration",
                            EnclosureProfileId = 1,
                            Length = 45.0,
                            Name = "Spike",
                            Sex = "Male",
                            Species = "Bearded Dragon",
                            Weight = 450.0
                        },
                        new
                        {
                            Id = 2,
                            DateAcquired = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Normal morph ball python, very docile",
                            EnclosureProfileId = 2,
                            Length = 120.0,
                            Name = "Monty",
                            Sex = "Male",
                            Species = "Ball Python",
                            Weight = 1500.0
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.ScheduledTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("ScheduledTasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Full substrate change and decoration cleaning",
                            DueDate = new DateTime(2025, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 1,
                            ReptileId = 1,
                            Title = "Clean terrarium"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Replace the UVB bulb which is nearing end of its effective lifespan",
                            DueDate = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsCompleted = false,
                            Priority = 2,
                            ReptileId = 2,
                            Title = "UVB Bulb Replacement"
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.SheddingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReptileId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("WasAssisted")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ReptileId");

                    b.ToTable("SheddingRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompletionDate = new DateTime(2025, 4, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = true,
                            Notes = "Normal shed.",
                            ReptileId = 1,
                            StartDate = new DateTime(2025, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasAssisted = false
                        },
                        new
                        {
                            Id = 2,
                            CompletionDate = new DateTime(2025, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsComplete = true,
                            Notes = "Helped with tail shedding.",
                            ReptileId = 2,
                            StartDate = new DateTime(2025, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            WasAssisted = true
                        });
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.BehaviorLog", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany("BehaviorLogs")
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.CaregiverAccess", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany()
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.EnvironmentalReading", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany("EnvironmentalReadings")
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.FeedingRecord", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany("FeedingRecords")
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.HealthScore", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany("HealthScores")
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.MeasurementRecord", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany("MeasurementRecords")
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.Reptile", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.EnclosureProfile", "EnclosureProfile")
                        .WithMany("Reptiles")
                        .HasForeignKey("EnclosureProfileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("EnclosureProfile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.ScheduledTask", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany("ScheduledTasks")
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.SheddingRecord", b =>
                {
                    b.HasOne("ReptileCare.Shared.Models.Reptile", "Reptile")
                        .WithMany("SheddingRecords")
                        .HasForeignKey("ReptileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reptile");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.EnclosureProfile", b =>
                {
                    b.Navigation("Reptiles");
                });

            modelBuilder.Entity("ReptileCare.Shared.Models.Reptile", b =>
                {
                    b.Navigation("BehaviorLogs");

                    b.Navigation("EnvironmentalReadings");

                    b.Navigation("FeedingRecords");

                    b.Navigation("HealthScores");

                    b.Navigation("MeasurementRecords");

                    b.Navigation("ScheduledTasks");

                    b.Navigation("SheddingRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
