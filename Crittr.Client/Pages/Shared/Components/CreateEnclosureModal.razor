@using Crittr.Client.Services
@using Crittr.Shared.DTOs
@inject EnclosureService EnclosureService
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="fixed inset-0 z-[1000] bg-black bg-opacity-50 flex items-center justify-center overflow-auto">
        <div class="relative mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white dark:bg-gray-800"
             @onclick:stopPropagation>
            <div class="mt-3 text-center">
                <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-6">Create New Enclosure</h3>

                <form @onsubmit="HandleSubmit">
                    <div class="mt-2 text-left">
                        <div class="mb-4">
                            <label for="enclosureName"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Enclosure Name
                                *</label>
                            <input type="text" id="enclosureName"
                                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                   @bind="newEnclosure.Name" placeholder="e.g. Desert Vivarium" required/>
                        </div>

                        <div class="grid grid-cols-3 gap-4 mb-4">
                            <div>
                                <label for="length"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Length (in)
                                    *</label>
                                <input type="number" id="length"
                                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                       @bind="newEnclosure.Length" min="1" step="0.1" required/>
                            </div>
                            <div>
                                <label for="width"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Width (in)
                                    *</label>
                                <input type="number" id="width"
                                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                       @bind="newEnclosure.Width" min="1" step="0.1" required/>
                            </div>
                            <div>
                                <label for="height"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Height (in)
                                    *</label>
                                <input type="number" id="height"
                                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                       @bind="newEnclosure.Height" min="1" step="0.1" required/>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label for="substrateType"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Substrate
                                Type</label>
                            <input type="text" id="substrateType"
                                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                   @bind="newEnclosure.SubstrateType"
                                   placeholder="e.g. Critter Carpet, Aspen Shavings"/>
                        </div>

                        <div class="mb-4">
                            <label for="idealTemperature"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Ideal
                                Temperature (Â°F) *</label>
                            <input type="number" id="idealTemperature"
                                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                   @bind="newEnclosure.IdealTemperature" min="0" max="120" step="0.1" required/>
                        </div>

                        <div class="mb-4">
                            <label for="idealHumidity"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Ideal Humidity
                                (%) *</label>
                            <input type="number" id="idealHumidity"
                                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                   @bind="newEnclosure.IdealHumidity" min="0" max="100" step="0.1" required/>
                        </div>

                        <div class="mb-4 grid grid-cols-2 gap-4">
                            <div class="flex items-center">
                                <input type="checkbox" id="hasUVB"
                                       class="mr-2 h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                                       @bind="newEnclosure.HasUVBLighting"/>
                                <label for="hasUVB" class="block text-gray-700 dark:text-gray-300 text-sm font-bold">UVB
                                    Lighting</label>
                            </div>
                            <div class="flex items-center">
                                <input type="checkbox" id="hasHeating"
                                       class="mr-2 h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded"
                                       @bind="newEnclosure.HasHeatingElement"/>
                                <label for="hasHeating"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold">Heating
                                    Element</label>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
                            <p>@errorMessage</p>
                        </div>
                    }

                    <div class="flex items-center justify-between mt-6">
                        <button type="button"
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                                @onclick="Close">
                            Cancel
                        </button>
                        <button type="submit"
                                class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                                disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span>Creating...</span>
                            }
                            else
                            {
                                <span>Create Enclosure</span>
                            }
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private bool _isVisible;

    [Parameter]
    public bool IsVisible
    {
        get => _isVisible;
        set
        {
            if (_isVisible != value)
            {
                _isVisible = value;
                JSRuntime.InvokeVoidAsync("console.log", "Enclosure modal IsVisible changed to: " + value);
                if (_isVisible)
                {
                    ResetForm();
                }
            }
        }
    }

    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter] public EventCallback<EnclosureProfileDto> OnEnclosureCreated { get; set; }

    private EnclosureProfileDto newEnclosure = new EnclosureProfileDto();
    private bool isSubmitting = false;
    private string errorMessage = null;

    protected override void OnInitialized()
    {
        ResetForm();
    }

    private void ResetForm()
    {
        // Reset form values
        newEnclosure = new EnclosureProfileDto
        {
            HasUVBLighting = true, // Default values
            HasHeatingElement = true,
            IdealTemperature = 85,
            IdealHumidity = 50,
            Length = 36,
            Width = 18,
            Height = 18
        };
        errorMessage = null;
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;

            // Basic validation
            if (string.IsNullOrWhiteSpace(newEnclosure.Name))
            {
                errorMessage = "Enclosure name is required.";
                return;
            }

            if (newEnclosure.Length <= 0 || newEnclosure.Width <= 0 || newEnclosure.Height <= 0)
            {
                errorMessage = "Length, width, and height must be greater than zero.";
                return;
            }

            if (newEnclosure.IdealTemperature <= 0)
            {
                errorMessage = "Ideal temperature must be specified.";
                return;
            }

            if (newEnclosure.IdealHumidity < 0 || newEnclosure.IdealHumidity > 100)
            {
                errorMessage = "Ideal humidity must be between 0 and 100%.";
                return;
            }

            // Submit to service
            var createdEnclosure = await EnclosureService.CreateEnclosureAsync(newEnclosure);

            // Success - notify parent
            await OnEnclosureCreated.InvokeAsync(createdEnclosure);
            await Close();

            // Optional: Show success toast
            await JSRuntime.InvokeVoidAsync("alert", $"Enclosure '{createdEnclosure.Name}' created successfully!");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error creating enclosure: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", "Error creating enclosure: " + ex.Message);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        _isVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
        StateHasChanged();
    }

}