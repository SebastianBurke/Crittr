@using ReptileCare.Client.Services
@using ReptileCare.Shared.DTOs
@using ReptileCare.Shared.Models.Enums

@if (IsVisible)
{
    <div class="fixed inset-0 z-[1000] bg-black bg-opacity-50 flex items-center justify-center overflow-auto">
        <div class="relative mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white dark:bg-gray-800 text-lg"
             @onclick:stopPropagation>
            <div class="mt-3 text-center">
                <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-6">Add a Critter</h3>
                @if (step == 1)
                {
                    <div>
                        <label class="block text-sm font-bold text-gray-700 dark:text-gray-300 mb-2">
                            What kind of critter is it?
                        </label>
                        <select class="w-full p-2 rounded dark:bg-gray-700 text-gray-800 dark:text-white"
                                @bind="selectedSpeciesType">
                            @foreach (var type in Enum.GetValues<SpeciesType>())
                            {
                                <option value="@type">@type</option>
                            }
                        </select>

                        <button class="mt-4 bg-green-600 text-white px-4 py-2 rounded" @onclick="NextStep">Next</button>
                    </div>
                }
                else if (step == 2)
                {
                    <div class="relative">
                        <label class="block text-sm font-bold text-gray-700 dark:text-gray-300 mb-2">
                            What species of @selectedSpeciesType?
                        </label>
                        <input type="text"
                               class="w-full p-2 rounded dark:bg-gray-700 text-gray-800 dark:text-white"
                               @bind="speciesQuery"
                               @oninput="OnSpeciesInputChanged"
                               placeholder="Start typing (e.g. Leopard Gecko)"/>

                        @if (showSuggestions && filteredSpecies.Any())
                        {
                            <ul class="absolute bg-white dark:bg-gray-700 border mt-1 w-full z-10 rounded shadow-lg max-h-40 overflow-y-auto text-left">
                                @foreach (var suggestion in filteredSpecies)
                                {
                                    <li class="flex items-center justify-between gap-2 px-4 py-2 hover:bg-green-100 dark:hover:bg-green-800 cursor-pointer"
                                        @onclick="() => SelectSpecies(suggestion)">
    
                                        <div class="text-left">
                                            <span>@suggestion.CommonName</span><br/>
                                            <span class="text-xs text-gray-400">@suggestion.ScientificName</span>
                                        </div>

                                        @if (!string.IsNullOrWhiteSpace(suggestion.ImageUrl))
                                        {
                                            <img src="@suggestion.ImageUrl" alt="image of @suggestion.CommonName"
                                                 class="w-8 h-8 rounded object-cover flex-shrink-0"/>
                                        }
                                    </li>
                                }
                            </ul>

                        }
                        <div class="mt-4 flex justify-between">
                            <button class="text-sm text-gray-500" @onclick="PrevStep">Back</button>
                            <button class="bg-green-600 text-white px-4 py-2 rounded" @onclick="NextStep"
                                    disabled="@string.IsNullOrWhiteSpace(newReptile.Species)">
                                Next
                            </button>
                        </div>
                    </div>
                }
                else if (step == 3)
                {
                    <div>
                        <label class="block text-sm font-bold text-gray-700 dark:text-gray-300 mb-2">
                            Give it a name
                        </label>
                        <input type="text"
                               class="w-full p-2 rounded dark:bg-gray-700 text-gray-800 dark:text-white"
                               @bind="newReptile.Name"
                               placeholder="e.g. Spike"/>

                        <div class="mt-4 flex justify-between">
                            <button class="text-sm text-gray-500" @onclick="PrevStep">Back</button>
                            <button class="bg-green-600 text-white px-4 py-2 rounded" @onclick="NextStep"
                                    disabled="@string.IsNullOrWhiteSpace(newReptile.Name)">
                                Next
                            </button>
                        </div>
                    </div>
                }
                else if (step == 4)
                {
                    <EditForm Model="@newReptile" OnValidSubmit="HandleSubmit">
                        <div class="text-left">
                            <label class="block text-sm font-bold text-gray-700 dark:text-gray-300 mb-2">Weight
                                (g)</label>
                            <InputNumber @bind-Value="newReptile.Weight"
                                         class="w-full p-2 rounded dark:bg-gray-700 text-gray-800 dark:text-white"/>

                            <label class="mt-4 block text-sm font-bold text-gray-700 dark:text-gray-300 mb-2">Length
                                (in)</label>
                            <InputNumber @bind-Value="newReptile.Length"
                                         class="w-full p-2 rounded dark:bg-gray-700 text-gray-800 dark:text-white"/>

                            <div class="mt-6 flex justify-between">
                                <button class="text-sm text-gray-500" @onclick="PrevStep">Back</button>
                                <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded"
                                        disabled="@isSubmitting">
                                    @if (isSubmitting)
                                    {
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <span>Save Critter</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </EditForm>
                }
                <button @onclick="CloseModal"
                        class="absolute top-4 right-4 text-gray-400 hover:text-red-600 transition-transform transform hover:scale-125"
                        aria-label="Close">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>

            </div>
        </div>
    </div>
}

@code {
    
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string EnclosureName { get; set; } = "Enclosure";
    [Parameter] public int EnclosureId { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<ReptileDto> OnReptileAdded { get; set; }

    [Inject] public SpeciesService SpeciesService { get; set; } = default!;
    [Inject] public ReptileService ReptileService { get; set; } = default!;
    [Inject] public IJSRuntime JSRuntime { get; set; } = default!;

    private int step = 1;

    private SpeciesType selectedSpeciesType = SpeciesType.Reptile;
    private string speciesQuery = "";
    private List<SpeciesService.SpeciesSuggestion> filteredSpecies = new();
    private bool showSuggestions = false;
    private bool isSubmitting = false;

    private ReptileDto newReptile = new();

    private void NextStep() => step++;
    private void PrevStep() => step--;

    private async Task OnSpeciesInputChanged(ChangeEventArgs e)
    {
        speciesQuery = e.Value?.ToString() ?? "";
        if (speciesQuery.Length < 2)
        {
            showSuggestions = false;
            filteredSpecies.Clear();
            return;
        }

        filteredSpecies = await SpeciesService.SearchSpeciesAsync(selectedSpeciesType, speciesQuery);
        showSuggestions = true;
    }

    private void SelectSpecies(SpeciesService.SpeciesSuggestion suggestion)
    {
        newReptile.Species = suggestion.ScientificName;
        speciesQuery = suggestion.CommonName;
        showSuggestions = false;
    }


    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            newReptile.EnclosureProfileId = EnclosureId;
            newReptile.DateAcquired = DateTime.Today;

            var created = await ReptileService.CreateReptileAsync(newReptile);
            await OnReptileAdded.InvokeAsync(created);
            await JSRuntime.InvokeVoidAsync("alert", $"{created.Name} added to {EnclosureName}!");

            await IsVisibleChanged.InvokeAsync(false);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error saving reptile: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task CloseModal()
    {
        await IsVisibleChanged.InvokeAsync(false);
        showSuggestions = false;
        step = 1;
    }
}
