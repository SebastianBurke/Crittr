@using ReptileCare.Client.Services
@using ReptileCare.Shared.DTOs
@inject ReptileService ReptileService
@inject IJSRuntime JSRuntime

@if (IsVisible)
{
    <div class="fixed inset-0 z-[1000] bg-black bg-opacity-50 flex items-center justify-center overflow-auto">
        <div class="relative mx-auto p-5 border w-full max-w-md shadow-lg rounded-md bg-white dark:bg-gray-800"
             @onclick:stopPropagation>
            <div class="mt-3 text-center">
                <h3 class="text-xl font-medium text-gray-900 dark:text-white mb-6">Add Reptile to @EnclosureName</h3>

                <form @onsubmit="HandleSubmit">
                    <div class="mt-2 text-left">
                        <div class="mb-4">
                            <label for="reptileName"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Name *</label>
                            <input type="text" id="reptileName"
                                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                   @bind="newReptile.Name" placeholder="e.g. Spike" required/>
                        </div>

                        <div class="mb-4">
                            <label for="species" class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Species
                                *</label>
                            <input type="text" id="species"
                                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                   @bind="newReptile.Species" placeholder="e.g. Bearded Dragon" required/>
                        </div>

                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="dateAcquired"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Date
                                    Acquired *</label>
                                <input type="date" id="dateAcquired"
                                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                       @bind="newReptile.DateAcquired" required/>
                            </div>
                            <div>
                                <label for="dateOfBirth"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Date of
                                    Birth</label>
                                <input type="date" id="dateOfBirth"
                                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                       @bind="newReptile.DateOfBirth"/>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label for="sex"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Sex</label>
                            <select id="sex"
                                    class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                    @bind="newReptile.Sex">
                                <option value="">Unknown</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                            </select>
                        </div>

                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label for="weight"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Weight (g)
                                    *</label>
                                <input type="number" id="weight"
                                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                       @bind="newReptile.Weight" min="0" step="0.1" required/>
                            </div>
                            <div>
                                <label for="length"
                                       class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Length (in)
                                    *</label>
                                <input type="number" id="length"
                                       class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                       @bind="newReptile.Length" min="0" step="0.1" required/>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label for="lastFeedingDate"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Last Feeding
                                Date</label>
                            <input type="date" id="lastFeedingDate"
                                   class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline"
                                   @bind="newReptile.LastFeedingDate"/>
                        </div>

                        <div class="mb-4">
                            <label for="description"
                                   class="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-2">Description
                                (Optional)</label>
                            <textarea id="description"
                                      class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 dark:text-white dark:bg-gray-700 leading-tight focus:outline-none focus:shadow-outline h-24"
                                      @bind="newReptile.Description"
                                      placeholder="Any additional information about this reptile..."></textarea>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
                            <p>@errorMessage</p>
                        </div>
                    }

                    <div class="flex items-center justify-between mt-6">
                        <button type="button"
                                class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                                @onclick="Close">
                            Cancel
                        </button>
                        <button type="submit"
                                class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
                                disabled="@isSubmitting">
                            @if (isSubmitting)
                            {
                                <span>Adding...</span>
                            }
                            else
                            {
                                <span>Add Reptile</span>
                            }
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
}

@code {
    private bool _isVisible;

    [Parameter]
    public bool IsVisible
    {
        get => _isVisible;
        set
        {
            if (_isVisible != value)
            {
                _isVisible = value;
                JSRuntime.InvokeVoidAsync("console.log", "Reptile modal IsVisible changed to: " + value);
                if (_isVisible)
                {
                    ResetForm();
                }
            }
        }
    }

    [Parameter] public string EnclosureName { get; set; } = "Enclosure";
    [Parameter] public int EnclosureId { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<ReptileDto> OnReptileAdded { get; set; }

    private ReptileDto newReptile = new();
    private bool isSubmitting = false;
    private string errorMessage;

    private void ResetForm()
    {
        newReptile = new ReptileDto
        {
            EnclosureProfileId = EnclosureId,
            DateAcquired = DateTime.Today,
            LastFeedingDate = DateTime.Today,
            Weight = 0,
            Length = 0
        };
        errorMessage = null;
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            errorMessage = null;

            // Validation
            if (string.IsNullOrWhiteSpace(newReptile.Name))
            {
                errorMessage = "Reptile name is required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(newReptile.Species))
            {
                errorMessage = "Species is required.";
                return;
            }

            if (newReptile.Weight <= 0)
            {
                errorMessage = "Weight must be greater than zero.";
                return;
            }

            if (newReptile.Length <= 0)
            {
                errorMessage = "Length must be greater than zero.";
                return;
            }

            var createdReptile = await ReptileService.CreateReptileAsync(newReptile);

            await OnReptileAdded.InvokeAsync(createdReptile);
            await Close();

            await JSRuntime.InvokeVoidAsync("alert", $"{createdReptile.Name} has been added to {EnclosureName}!");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error adding reptile: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("console.error", errorMessage);
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }

    private async Task Close()
    {
        _isVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
        StateHasChanged();
    }

}