@page "/reptile/{ReptileId:int}"
@inject FeedingService FeedingService
@inject SheddingService SheddingService
@inject MeasurementService MeasurementService
@inject HealthService HealthService
@inject ScheduledTaskService ScheduledTaskService

@using ReptileCare.Client.Services
@using ReptileCare.Shared.DTOs

<PageTitle>Reptile Profile</PageTitle>

<div class="p-4">
    <div class="flex border-b border-gray-300 mb-4">
        <button class="py-2 px-4 text-sm font-medium" @onclick="() => activeTab = 0" class:font-bold="activeTab == 0">Feeding History</button>
        <button class="py-2 px-4 text-sm font-medium" @onclick="() => activeTab = 1" class:font-bold="activeTab == 1">Shedding Records</button>
        <button class="py-2 px-4 text-sm font-medium" @onclick="() => activeTab = 2" class:font-bold="activeTab == 2">Measurements</button>
        <button class="py-2 px-4 text-sm font-medium" @onclick="() => activeTab = 3" class:font-bold="activeTab == 3">Health Scores</button>
        <button class="py-2 px-4 text-sm font-medium" @onclick="() => activeTab = 4" class:font-bold="activeTab == 4">Scheduled Tasks</button>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-8 text-gray-500">Loading...</div>
    }
    else
    {
        @if (activeTab == 0)
        {
            <h2 class="text-lg font-semibold mb-2">Feeding History</h2>
            <ul class="space-y-1">
                @foreach (var f in Feedings)
                {
                    <li class="border-b pb-1">@f.FeedingDate.ToShortDateString(): @f.FoodItem (@f.Quantity)</li>
                }
            </ul>
        }
        else if (activeTab == 1)
        {
            <h2 class="text-lg font-semibold mb-2">Shedding Records</h2>
            <ul class="space-y-1">
                @foreach (var s in Sheddings)
                {
                    <li class="border-b pb-1">@s.StartDate.ToShortDateString() → @s.CompletionDate?.ToShortDateString() — @(s.IsComplete ? "✅" : "🕒")</li>
                }
            </ul>
        }
        else if (activeTab == 2)
        {
            <h2 class="text-lg font-semibold mb-2">Measurements</h2>
            <ul class="space-y-1">
                @foreach (var m in Measurements)
                {
                    <li class="border-b pb-1">@m.MeasurementDate.ToShortDateString(): @m.Weight g / @m.Length cm</li>
                }
            </ul>
        }
        else if (activeTab == 3)
        {
            <h2 class="text-lg font-semibold mb-2">Health Scores</h2>
            <ul class="space-y-1">
                @foreach (var h in HealthScores)
                {
                    <li class="border-b pb-1">@h.AssessmentDate.ToShortDateString(): Score @h.Score/10 (@h.Notes)</li>
                }
            </ul>
        }
        else if (activeTab == 4)
        {
            <h2 class="text-lg font-semibold mb-2">Scheduled Tasks</h2>
            <ul class="space-y-1">
                @foreach (var t in Tasks)
                {
                    <li class="border-b pb-1">@t.DueDate.ToShortDateString(): @t.Title — @(t.IsCompleted ? "✅" : "🕒")</li>
                }
            </ul>
        }
    }
</div>

@code {
    [Parameter] public int ReptileId { get; set; }
    private bool isLoading = true;
    private int activeTab = 0;

    private List<FeedingRecordDto> Feedings = new();
    private List<SheddingRecordDto> Sheddings = new();
    private List<MeasurementRecordDto> Measurements = new();
    private List<HealthScoreDto> HealthScores = new();
    private List<ScheduledTaskDto> Tasks = new();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var feedingTask = FeedingService.GetByReptileIdAsync(ReptileId);
        var sheddingTask = SheddingService.GetByReptileIdAsync(ReptileId);
        var measurementTask = MeasurementService.GetByReptileIdAsync(ReptileId);
        var healthTask = HealthService.GetByReptileIdAsync(ReptileId);
        var taskTask = ScheduledTaskService.GetByReptileIdAsync(ReptileId);

        await Task.WhenAll(feedingTask, sheddingTask, measurementTask, healthTask, taskTask);

        Feedings = await feedingTask;
        Sheddings = await sheddingTask;
        Measurements = await measurementTask;
        HealthScores = await healthTask;
        Tasks = await taskTask;

        isLoading = false;
    }
}