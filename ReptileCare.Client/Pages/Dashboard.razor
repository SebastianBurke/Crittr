@page "/"
@using ReptileCare.Client.Pages.Shared.Components
@using ReptileCare.Client.Services
@using ReptileCare.Shared.DTOs
@inject ReptileService ReptileService
@inject EnclosureService EnclosureService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IJSRuntime JSRuntime

<div class="relative w-full text-center mt-8">
    @if (isLoading)
    {
    }
    else if (!isAuthenticated)
    {
        <p>Please <a href="/login" class="text-blue-500 underline">log in</a> to view your reptiles and enclosures.</p>
    }
    else
    {
        <div id="swipeArea" class="relative touch-pan-x">
            @if (currentCardIndex < enclosures.Count)
            {
                var enclosure = enclosures[currentCardIndex];
                var enclosureReptiles = reptiles.Where(r => r.EnclosureProfileId == enclosure.Id).ToList();

                <div
                    class="max-w-xl mx-auto bg-gray-100 dark:bg-gray-700 border-2 border-green-400 rounded-xl p-6 shadow-lg">
                    <h2 class="text-2xl font-bold mb-1">@enclosure.Name</h2>

                    @if (enclosureReptiles.Count == 0)
                    {
                        <div class="mt-4 text-gray-400 italic">No critters here yet... it's a bit too quiet.</div>
                        <button class="mt-4 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                                @onclick="() => ShowAddReptileModal(enclosure)">Add a Critter
                        </button>
                    }
                    else
                    {
                        <div
                            class="relative h-40 w-full mb-4 overflow-hidden rounded border bg-green-100 dark:bg-green-800">
                            @foreach (var reptile in enclosureReptiles)
                            {
                                <img id="critter-@reptile.Id"
                                     src="img/critters/lizard.svg"
                                     class="absolute w-12 h-12 transition-transform duration-1000 ease-in-out"
                                     alt="@reptile.Name"
                                     style="top:@(RandomOffset())%; left:@(RandomOffset())%;"/>
                            }

                        </div>
                        <div class="grid grid-cols-2 gap-4 mt-4">
                            @foreach (var reptile in enclosureReptiles)
                            {
                                <div class="bg-white dark:bg-gray-800 border rounded p-3 text-left">
                                    <h3 class="text-lg font-semibold">@reptile.Name</h3>
                                    <p class="text-sm text-gray-600 dark:text-gray-400">@reptile.Species</p>
                                    <p class="text-xs text-gray-400">@("Last fed: " + (reptile.LastFeedingDate?.ToShortDateString() ?? "N/A"))</p>
                                </div>
                            }
                        </div>
                        <button class="mt-4 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                                @onclick="() => ShowAddReptileModal(enclosure)">Add Another Critter
                        </button>
                    }
                </div>
            }
            else
            {
                <div
                    class="max-w-xl mx-auto bg-gradient-to-br from-gray-100 to-green-100 dark:from-gray-700 dark:to-green-900 border-2 border-dashed border-green-400 rounded-xl flex flex-col justify-center items-center p-6">
                    <h2 class="text-xl font-semibold mb-2">Your next enclosure awaits</h2>
                    <p class="text-gray-500 mb-4">Let's build a new home for your critters. Each habitat tells a
                        story.</p>
                    <button class="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                            @onclick="ShowAddEnclosureModal">Add an Enclosure
                    </button>
                </div>
            }
        </div>

        <nav class="flex justify-center gap-2 mt-4" aria-label="Enclosure navigation">
            @for (int i = 0; i <= enclosures.Count; i++)
            {
                int index = i; // Capture the loop variable
                bool isAddNew = (i == enclosures.Count);
                string label = isAddNew ? "Add New Enclosure" : $"View enclosure: {enclosures[i].Name}";
                <button
                    class="w-4 h-4 rounded-full border-2 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500 @(i == currentCardIndex ? (isAddNew ? "bg-green-300 border-green-600" : "bg-green-500 border-green-500") : "bg-gray-300 dark:bg-gray-600 border-transparent")"
                    aria-label="@label"
                    aria-current="@(i == currentCardIndex ? "true" : "false")"
                    @onclick="() => NavigateToCard(index)">
                </button>
            }
        </nav>
    }
</div>

<CreateEnclosureModal IsVisible="showEnclosureModal"
                      IsVisibleChanged="HandleEnclosureModalVisibilityChanged"
                      OnEnclosureCreated="HandleEnclosureCreated"/>

<AddReptileModal IsVisible="showReptileModal"
                 IsVisibleChanged="HandleReptileModalVisibilityChanged"
                 EnclosureName="@currentEnclosureName"
                 EnclosureId="@currentEnclosureId"
                 OnReptileAdded="HandleReptileAdded"/>


@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private List<EnclosureProfileDto> enclosures = new();
    private List<ReptileDto> reptiles = new();
    private DotNetObjectReference<Dashboard>? dotNetHelper;
    private int currentCardIndex = 0;
    private int totalCards => enclosures.Count + 1;

    // Modal control
    private bool showEnclosureModal = false;
    private bool showReptileModal = false;
    private string currentEnclosureName = "";
    private int currentEnclosureId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isAuthenticated = await localStorage.ContainKeyAsync("authToken");
            if (isAuthenticated)
            {
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error in initialization: " + ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData()
    {
        try
        {
            enclosures = await EnclosureService.GetEnclosuresAsync();
            reptiles = await ReptileService.GetReptilesAsync();

            // Log for debugging
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading data: " + ex.Message);
        }
    }

    private void NavigateToCard(int index)
    {
        // Ensure the index is within bounds
        if (index >= 0 && index <= enclosures.Count)
        {
            currentCardIndex = index;
            StateHasChanged(); // Explicitly trigger UI update
        }
    }

    // Enclosure modal methods
    private void ShowAddEnclosureModal()
    {
        showEnclosureModal = true;
        StateHasChanged(); // Explicitly update UI
    }

    private Task HandleEnclosureModalVisibilityChanged(bool visible)
    {
        showEnclosureModal = visible;
        StateHasChanged(); // Explicitly update UI
        return Task.CompletedTask;
    }

    private async Task HandleEnclosureCreated(EnclosureProfileDto newEnclosure)
    {
        // Reload data
        await LoadData();

        // Navigate to the new enclosure
        currentCardIndex = enclosures.FindIndex(e => e.Id == newEnclosure.Id);
        if (currentCardIndex < 0) currentCardIndex = enclosures.Count - 1; // Fallback

        StateHasChanged();
    }

    // Reptile modal methods
    private void ShowAddReptileModal(EnclosureProfileDto enclosure)
    {
        currentEnclosureName = enclosure.Name;
        currentEnclosureId = enclosure.Id;
        showReptileModal = true;
        StateHasChanged(); // Explicitly update UI
    }

    private Task HandleReptileModalVisibilityChanged(bool visible)
    {
        showReptileModal = visible;
        StateHasChanged(); // Explicitly update UI
        return Task.CompletedTask;
    }

    private async Task HandleReptileAdded(ReptileDto newReptile)
    {
        // Reload reptiles data only
        reptiles = await ReptileService.GetReptilesAsync();
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            dotNetHelper = DotNetObjectReference.Create(this);
        }

        if (!isLoading && isAuthenticated && currentCardIndex < enclosures.Count)
        {
            var enclosure = enclosures[currentCardIndex];
            var enclosureReptiles = reptiles
                .Where(r => r.EnclosureProfileId == enclosure.Id)
                .Select(r => $"critter-{r.Id}")
                .ToArray();
            await JSRuntime.InvokeVoidAsync("animateAllCritters", (object)enclosureReptiles);
        }

    }

    private static int RandomOffset()
    {
        return new Random().Next(5, 80); // stays within bounds
    }
    

}